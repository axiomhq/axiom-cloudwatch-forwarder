Description: A lambda function to auto subscribe Axiom CloudWatch Forwarder to new log groups.
Parameters:
  LambdaFunctionName:
    Type: String
    Description: Name of the AWS Lambda function.
    Default: axiom-cloudwatch-log-groups-listener
    AllowedPattern: ".+" # required
  AxiomCloudWatchForwarderLambdaARN:
    Type: String
    Description: The ARN of the AWS Lambda function that is used to forward logs to Axiom.
    AllowedPattern: ".+" # required
  CloudWatchLogGroupsPrefix:
    Type: String
    Description: The prefix of the CloudWatch log groups that will trigger the Axiom CloudWatch Forwarder Lambda.
    Default: "" # all
  AxiomLambdaLogRetention:
    Type: "Number"
    Description: "The number of days to retain CloudWatch logs for the created lambda functions."
    Default: 1
  EnableCloudTrail:
    Description: "Enable Cloudtrail for cloudwatch CreateLogGroup event notification? If already enabled, choose 'false'"
    Default: true
    Type: String
    AllowedValues: [true, false]
Conditions:
  ShouldEnableCloudTrail: !Equals [true, !Ref EnableCloudTrail]
Resources:
  AxiomCloudWatchLogGroupsListenerS3Bucket:
    Condition: ShouldEnableCloudTrail
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketName: !Join ["-", [!Ref AWS::StackName, "cloudtrail"]]
  AxiomCloudWatchLogGroupsListenerS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: ShouldEnableCloudTrail
    DependsOn: AxiomCloudWatchLogGroupsListenerS3Bucket
    Properties:
      Bucket: !Ref AxiomCloudWatchLogGroupsListenerS3Bucket
      PolicyDocument:
        {
          "Version": "2012-10-17",
          "Statement":
            [
              {
                "Sid": "AWSCloudTrailAclCheck20150319",
                "Effect": "Allow",
                "Principal": { "Service": "cloudtrail.amazonaws.com" },
                "Action": "s3:GetBucketAcl",
                "Resource":
                  !GetAtt ["AxiomCloudWatchLogGroupsListenerS3Bucket", "Arn"],
              },
              {
                "Sid": "AWSCloudTrailWrite20150319",
                "Effect": "Allow",
                "Principal": { "Service": "cloudtrail.amazonaws.com" },
                "Action": "s3:PutObject",
                "Resource":
                  !Join [
                    "",
                    [
                      !GetAtt ["AxiomCloudWatchLogGroupsListenerS3Bucket", "Arn"],
                      "/AWSLogs/",
                      { "Ref": "AWS::AccountId" },
                      "/*",
                    ],
                  ],
                "Condition":
                  {
                    "StringEquals":
                      { "s3:x-amz-acl": "bucket-owner-full-control" },
                  },
              },
            ],
        }
  AxiomLogGroupsListenerCloudTrail:
    Type: AWS::CloudTrail::Trail
    Condition: ShouldEnableCloudTrail
    DependsOn: AxiomCloudWatchLogGroupsListenerS3BucketPolicy
    Properties:
      EnableLogFileValidation: false
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: true
      IsLogging: true
      S3BucketName: !Ref AxiomCloudWatchLogGroupsListenerS3Bucket
      TrailName: !Join ["-", [!Ref AWS::StackName, { "Ref": "AWS::AccountId" }]]
  AxiomLogGroupsListenerrEventRule:
    DependsOn: AxiomCloudWatchLogGroupsListener
    Type: AWS::Events::Rule
    Properties:
      Description: Axiom log group auto subscription event rule.,
      EventPattern:
        source: ["aws.logs"]
        detail-type: ["AWS API Call via CloudTrail"]
        detail:
          eventSource: ["logs.amazonaws.com"]
          eventName: ["CreateLogGroup"]
      Name:
        "Fn::Join":
          ["-", [{ "Ref": "AWS::StackName" }, "auto-subscription-rule"]]
      Targets:
        - Id: !Join ["-", [!Ref "AWS::StackName", "auto-subscription-rule"]]
          Arn: !GetAtt ["AxiomLogGroupsListener", "Arn"]
  AxiomLogGroupsListenerrPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:DeleteSubscriptionFilter
              - logs:PutSubscriptionFilter
              - logs:DescribeLogGroups
              - lambda:AddPermission
              - lambda:RemovePermission
              - lambda:InvokeFunction
              - lambda:GetFunction
              - logs:DescribeLogStreams
              - logs:DescribeSubscriptionFilters
              - logs:FilterLogEvents
              - logs:GetLogEvents
            Effect: Allow
            Resource: "*"
      PolicyName: axiom-cloudwatch-log-groups-listener-policy
      Roles:
        - !Ref "AxiomCloudWatchLogGroupsListener"
  AxiomCloudWatchLogGroupsListenerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - logs.amazonaws.com
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  AxiomCloudWatchLogGroupsListener:
    Type: AWS::Lambda::Function
    DependsOn:
      - AxiomCloudWatchLogGroupsListenerRole
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Runtime: python3.9
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          # DO NOT EDIT
          # CI will replace these comments with the code from ./logs_subscriber.py
      Role: !GetAtt
        - AxiomCloudWatchLogGroupsListenerRole
        - Arn
      Description: Axiom CloudWatch Automatic log groups listener lambda
      Environment:
        Variables:
          AXIOM_CLOUDWATCH_FORWARDER_LAMBDA_ARN: !Ref "AxiomCloudWatchForwarderLambdaARN"
          LOG_GROUP_PREFIX: !Ref "CloudWatchLogGroupsPrefix"
  AxiomCloudWatchLogGroupsListenerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: { "Fn::GetAtt": ["AxiomCloudWatchLogGroupsListener", "Arn"] }
      Principal: "events.amazonaws.com"
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn: !GetAtt ["AxiomCloudWatchLogGroupsListenerEventRule", "Arn"]
  AxiomCloudWatchLogsSubscriberLogGroup:
    DependsOn: ["AxiomCloudWatchLogGroupsListenerRole"]
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        !Join ["", ["/aws/lambda/", { "Ref": "AxiomCloudWatchLogGroupsListener" }]]
      RetentionInDays:
        Ref: "AxiomLambdaLogRetention"
